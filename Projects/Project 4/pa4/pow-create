#!/usr/bin/python3

import sys
import hashlib
import re
import time
from itertools import permutations


def hex(value):

    if (value == '0'):
        return 4

    elif value == '1':
        return 3

    elif value == '2':
        return 2

    elif value == '3':
        return 2

    elif value == '4':
        return 1

    elif value == '5':
        return 1

    elif value == '6':
        return 1

    elif value == '7':
        return 1

    else:
        return 0


def getLeadingBits(newHash):
    ind = 0
    zeros = 0

    while newHash[ind] == '0':
        zeros += 1
        ind += 1

    b = hex(newHash[ind])

    return (zeros * 4) + b
    

def work(hash, nbits):
    result = ["prefix", "itertions"]
    ascii = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ[\]0123456789!#$%&()*+-=,.^_`{|}~/:;@?<>"
    iterations = 0

    leadingBits = nbits//4
    if (hash[:leadingBits] == "".join(['0'] * leadingBits)) and hex(hash[leadingBits]) >= nbits % 4:                                                                              
        result = ["", iterations, hash]
        return result
    
    for k in range(1, len(ascii)+1):
        for i in range(len(ascii) - k + 1):
            j = i + k - 1
            
            base_string = ""
            for k in range(i, j + 1):
                base_string += ascii[k]

            permutation = [''.join(c) for c in permutations(base_string)]
            
            for prefix in permutation:
                newStr = prefix + hash
                newHash = hashlib.sha256(newStr.encode()).hexdigest()
                iterations += 1

            
                leadingBits = nbits//4
                if (newHash[:leadingBits] == "".join(['0'] * leadingBits)) and hex(newHash[leadingBits]) >= nbits % 4:
                    result = [prefix, iterations, newHash]
                    return result

                                              
            
    print(iterations)
    return


def main():

    if (len(sys.argv) != 3):
        print("Format should be: pow-create nbits file")
        return

    nbits = sys.argv[1]
    try:
        nbits = int(nbits)
        if nbits < 0:
            print("nbits must be a positive integer")
            return
    except:
        print("nbits must be a positive integer")
        return

    file = sys.argv[2]
    f = open(file, "rb")
    if not f:
        print("Unable to open file")
        return

    contents = f.read()

    # get initial-hash
    hash = hashlib.sha256(contents).hexdigest()

    #compile time
    start = time.time()
    result = work(hash, nbits)
    compiled = time.time() - start

    if result == None:
        print("Compute-time: {:.15f}".format(compiled))
        return

    newHash = result[-1]
    bits = getLeadingBits(newHash)
    
    # stdout
    print(f'File: {file}')
    print(f'Initial-hash: {hash}')
    print(f'Proof-of-work: {result[0]}')
    print(f'Hash: {result[-1]}')
    print(f'Leading-zero-bits: {bits}')
    print(f'Iterations: {result[1]}')
    print("Compute-time: {:.15f}".format(compiled))

    
if __name__ == '__main__':
    main()
